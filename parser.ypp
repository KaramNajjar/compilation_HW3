%{

	#include "output.hpp"
	#include "parser.hpp"
	#include <typeinfo>
	#include <string.h>
	#include <stdbool.h>
	#include <stack> 
	#include <iostream>
	
	//Namespaces
	using namespace std;
	using namespace output;

	typedef struct {
		string id;
		EType type;
		int offset;
		list<FormalDeclNode*>* params;  // only used for functions
		EType retType; 		// only used for functions
	}elementData;
	
	//Functions Declerations
	int yyerror(string message);
	extern int yylineno;
	extern int yylex();
	void AddScope();
	void RemoveScope();
	bool isLegalAssignment(EType type1,EType type2);
	bool checkFuncArgs(list<FormalDeclNode*>* decleration,list<ExpNode*>* callparams);
	bool checkFuncArgs2(list<EType> decleration,list<ExpNode*>* callparams);
	std::vector<string>* ListToVector(const list<FormalDeclNode*>* list);
	bool isExist(string elementName);
	elementData get_exists_element(string elementName);
	int insertElement(elementData& element);
	
	//Variables Defenitions
	list<list<elementData> > vartable;
	stack<int> offsets;
	static bool expListExist = false;
	static bool statementStarted = false;
	static bool insideSwitch = false;
	static bool insideWhile = false;
	static int mainFuncsCounter = 0;
	static int nextParamOffset =0;
	static EType currentRetType = E_UNDEFINED;

	
%}

%left AND
%left OR
%left RELOP
%left BINOP


%token VOID
%token INT
%token BYTE
%token B
%token BOOL

%right NOT
%token TRUE
%token FALSE
%token RETURN
%token IF

%token WHILE
%token SWITCH
%token CASE
%token DEFAULT
%token BREAK
%token COLON
%token SC
%token COMMA
%token LPAREN
%nonassoc RPAREN
%token LBRACE
%token RBRACE
%token ASSIGN


%token NUM
%token ID
%token STRING

%nonassoc ELSE

%%



Prog : Funcs 
	{
		if(mainFuncsCounter != 1)
		{
			errorMainMissing();
			exit(1);
		}
	}
	
Funcs 
	: { $$ = new FuncsListNode(); }
	| FuncDecl Funcs 
	{
		$$ = ((FuncsListNode*)$2);
		((FuncsListNode*)$$)->funcsList->push_front((FuncNode*)$1);
	} 

FuncDecl : RetType ID
		{
			string idVal = ((IdNode*)$2)->id;

			if(isExist(idVal))
			{
				errorDef(yylineno,idVal);
				exit(1);
			}
			elementData data = 
			{
				idVal,
				E_FUNC,
				0,
				new list<FormalDeclNode*>(),
				E_UNDEFINED
			};
			if(insertElement(data) != 0){
				errorDef(yylineno,idVal);
				exit(1);
			}
			currentRetType = ((TypeNode*)$1)->type;
			nextParamOffset = 0;
		} 
		LPAREN { AddScope(); } Formals RPAREN 
		{
			string idVal = ((IdNode*)$2)->id;
			elementData data = 
			{
				idVal,
				E_FUNC,
				0,
				((FormalsNode*)$5)->formalsListNode->formalDecls,
				((TypeNode*)$1)->type
			};
			
			if( idVal == "main" && ((TypeNode*)$1)->type == E_VOID && ((FormalsNode*)$5)->formalsListNode->formalDecls->empty())
			{
				mainFuncsCounter++;
			}
			
			// TODO: if(updateFuncParams(data) == false)
			// {
				// std::cout << "error in FuncDel " << std::endl;
				// exit(1);
			// }
		} LBRACE Statements RBRACE 
		{
			$$ = new FuncNode((TypeNode*)$1, (IdNode*)$2, (FormalsNode*)$5, (StatementNodes*)$8);
			currentRetType = E_UNDEFINED;
			RemoveScope();
		}
		
RetType : Type {$$ = (TypeNode*)$1;}
		| VOID {$$ = new TypeNode(E_VOID);}
		
Formals : FormalsList {$$ = new FormalsNode((FormalsListNode*)$1);}
		| {$$ = new FormalsNode(new FormalsListNode());}
	// mostly the warning exists here (*formal*)	
FormalsList : {nextParamOffset--;} FormalDecl FormalsTail
			{ 	
				elementData data = 
				{
					((FormalDeclNode*)$2)->id,
					((FormalDeclNode*)$2)->type,
					nextParamOffset,
					new list<FormalDeclNode*>(),
					E_UNDEFINED
				};  
				if((insertElement(data) != 0)){
					errorDef(yylineno,((FormalDeclNode*)$2)->id);
					exit(1);
				}
				offsets.top()--;
				nextParamOffset++;
								
				$$ = ((FormalsListNode*)$3);
				((FormalsListNode*)$$)->formalDecls->push_front((FormalDeclNode*)$2);
			}
			
FormalsTail : COMMA FormalsList { $$ = ((FormalsListNode*)$2); }
			| { $$ = new FormalsListNode(); }
						
FormalDecl : Type ID 
			{ 
				$$ = new FormalDeclNode(((TypeNode*)$1)->type,((IdNode*)$2)->id);
			}

Statements : Statements Statement 
		| Statement

Statement : LBRACE { AddScope(); } Statements RBRACE { RemoveScope(); }

		| Type ID SC 
			{ 	
				elementData data = 
				{
					((IdNode*)$2)->id,
					((TypeNode*)$1)->type,
					offsets.top(),
					new list<FormalDeclNode*>(),
					E_UNDEFINED
				};  
				if((insertElement(data) != 0)){
					errorDef(yylineno,((IdNode*)$2)->id);
					exit(1);
				}
			}
			
		| Type ID ASSIGN Exp SC 
			{ 
				elementData data = 
				{
					((IdNode*)$2)->id,
					((TypeNode*)$1)->type,
					offsets.top(),
					new list<FormalDeclNode*>(),
					E_UNDEFINED
				};  
				if((insertElement(data) != 0)){
					errorDef(yylineno,((IdNode*)$2)->id);
					exit(1);
				}
				if(isLegalAssignment(((ExpNode*)$4)->expType,((TypeNode*)$1)->type) == false){
					errorMismatch(yylineno);
					exit(1);
				}
			}
		| ID ASSIGN Exp SC
			{
				if(isExist(((IdNode*)$1)->id) == false || get_exists_element(((IdNode*)$1)->id).type == E_FUNC){
					errorUndef(yylineno,((IdNode*)$1)->id);
					exit(1);	
				}
				if(isLegalAssignment(((ExpNode*)$3)->expType,get_exists_element(((IdNode*)$1)->id).type) == false){
					errorMismatch(yylineno);
					exit(1);
				}
			
			}
		| Call SC 
		| RETURN SC 
			{
				if(currentRetType != E_VOID)
				{
					errorMismatch(yylineno);
					exit(1);
				}
			}
		| RETURN Exp SC
			{
				if(((ExpNode*)$3)->expType != currentRetType)
				{
					errorMismatch(yylineno);
					exit(1);
				
				}
			}
		| IF LPAREN Exp 
			{ 
				statementStarted = true;
				if(((ExpNode*)$3)->expType != E_BOOLEAN)
				{
					errorMismatch(yylineno);
					exit(1);
				}

			} RPAREN { AddScope(); } Statement { RemoveScope(); } IfContinue
		| WHILE LPAREN Exp 
			{
				statementStarted = true;
				insideWhile = true;
				if(((ExpNode*)$3)->expType != E_BOOLEAN)
				{
					errorMismatch(yylineno);
					exit(1);
				}
				
			} 
			RPAREN  { AddScope(); } Statement 
			{ 
				RemoveScope(); 
				statementStarted = false;
				insideWhile = false;
			}
		| BREAK SC 
			{
				if(insideSwitch == false && insideWhile == false)
				{
					errorUnexpectedBreak(yylineno);
					exit(1);
				}
			}
		| SWITCH LPAREN Exp 
			{
				EType expType = ((ExpNode*)$3)->expType;
				if(expType != E_INTEGER && expType != E_BYTE)
				{
					errorMismatch(yylineno);
					exit(1);
				}
			}
			RPAREN LBRACE {AddScope(); insideSwitch = true;} CaseList RBRACE {RemoveScope();insideSwitch = false;} SC

IfContinue: {}
		| ELSE { AddScope(); } Statement { RemoveScope(); }

CaseList : CaseDec CaseList
		| CaseDec

CaseDec : CASE NUM COLON Statement BREAK SC
		| CASE NUM B COLON Statement BREAK SC 
	
Call : ID LPAREN CheckFunc ExpList RPAREN
		{
			string idVal = ((IdNode*)$1)->id;
			elementData data = get_exists_element(idVal);
			if(idVal == "print" || idVal == "printi")
			{
					list<EType> decleration = list<EType>();
					idVal == "print" ? decleration.push_back(E_STRING) : decleration.push_back(E_INTEGER);
	
					if(checkFuncArgs2(decleration,((ExpListNode*)$1)->params) == false)
					{
						vector<string> v = vector<string>();
						idVal == "print" ? v.push_back("STRING") : v.push_back("INT");;
						errorPrototypeMismatch(yylineno,idVal,v);
						exit(1);
					}
				$$ = new CallNode((IdNode*)$1,E_VOID);
			}
			else{
				if(checkFuncArgs(data.params,((ExpListNode*)$1)->params) == false )
				{
						errorPrototypeMismatch(yylineno,idVal,*(ListToVector(data.params)));
						exit(1);
						
				}
				$$ = new CallNode((IdNode*)$1,data.retType);
			}
	
	
		}
	| ID LPAREN CheckFunc RPAREN
		{
			string idVal = ((IdNode*)$1)->id;
			elementData data = get_exists_element(idVal);
	
			if(data.params->size() != 0)
			{
				errorPrototypeMismatch(yylineno,idVal,*(ListToVector(data.params)));
				exit(1);
			}
			$$ = new CallNode((IdNode*)$1,data.retType);
		}
	
CheckFunc : 
	{
		
		string idVal = ((IdNode*)$-1)->id;
		if(idVal != "print" && idVal != "printi"){
			if(isExist(idVal) == false)
			{
				errorUndefFunc(yylineno,idVal);
				exit(1);
			}
			elementData data = get_exists_element(idVal);
			if(data.type != E_FUNC)
			{
				errorUndefFunc(yylineno,idVal);
				exit(1);
			}
		}

	}

ExpList: Exp COMMA ExpList  
		{
			$$ = $2;
			(((ExpListNode*)$$)->params)->push_front((ExpNode*)$1);
		};
		|Exp
		{
			$$ = new ExpListNode();
			(((ExpListNode*)$$)->params)->push_front((ExpNode*)$1);
		};
		
Type 	: 	INT 	{$$ = new TypeNode(E_INTEGER);} 
		|	BYTE  	{$$ = new TypeNode(E_BYTE);}
		|	BOOL 	{$$ = new TypeNode(E_BOOLEAN);};
		
Exp : LPAREN Exp RPAREN { $$ = $2; }
		
	| Exp BINOP Exp 
		{ 
			cout << "Binop exp started " << endl;
			
			
			if((((ExpNode*)$1))->expType != E_INTEGER && (((ExpNode*)$1))->expType != E_BYTE)
			{
				errorMismatch(yylineno);
				exit(1);
			}
			if((((ExpNode*)$1))->expType != (((ExpNode*)$3))->expType)
			{
				errorMismatch(yylineno);
				exit(1);
			}
			
			$$ = new BinExpNode(((ExpNode*)$1),(BinOpNode*)$2,((ExpNode*)$3)); 
			((ExpNode*)$$)->expType = (((ExpNode*)$1))->expType;
			
			cout << "Binop exp finished" << endl;

		}
		
	| ID 
		{
			cout << "ID exp started" << endl;
			if(isExist(((IdNode*)$1)->id) == false || get_exists_element(((IdNode*)$1)->id).type == E_FUNC){
						errorUndef(yylineno,((IdNode*)$1)->id);
						exit(1);
			}
				
			$$ = new IdExpNode((IdNode*)$1,get_exists_element(((IdNode*)$1)->id).type); 
			cout << "ID exp finished" << endl;
		}
	| Call  
		{
			if(((CallNode*)$1)->callType == E_VOID){
				errorMismatch(yylineno);
				exit(1);
			}
			// Get funcDecl by Id and Check RetType of FuncDecl
			((ExpNode*)$$)->expType = ((CallNode*)$1)->callType;
		}
	| NUM 
		{ 
			cout << "NUM exp started" << endl;
			
			$$ = new NumExpNode((NumNode*)$1); 
			
			cout << "NUM exp finished" << endl;

		}
		
	| NUM B 
		{
			cout << "NUM B exp started" << endl;

			if(((NumNode*)$1)->num > 255){
				string str = "" + ((NumNode*)$1)->num;
				errorByteTooLarge(yylineno,str);
				exit(1);
			}
			$$ = new NumBExpNode((NumNode*)$1); 
			
			cout << "NUM B exp finished" << endl;

		}

	| STRING 
		{
			cout << "String exp started" << endl;
			$$ = new StringExpNode((StringNode*)$1); 
			cout << "String exp finished" << endl;
		}
		
		
	| TRUE		{$$ = new BoolExpNode((BoolNode*)$1);}	
	| FALSE		{$$ = new BoolExpNode((BoolNode*)$1);}
	| NOT Exp	
		{
			if((((ExpNode*)$2))->expType != E_BOOLEAN){
				errorMismatch(yylineno);
				exit(1);
			 }
			$$ = new NotExpNode(((ExpNode*)$2));
		}
	| Exp OR Exp  
		{
			if(((ExpNode*)$1)->expType != E_BOOLEAN || ((ExpNode*)$3)->expType != E_BOOLEAN ){
				errorMismatch(yylineno);
				exit(1);
			 }
			 $$ = new ExpNode(E_BOOLEAN);
		}
	| Exp AND Exp 
		{
			if(((ExpNode*)$1)->expType != E_BOOLEAN || ((ExpNode*)$3)->expType != E_BOOLEAN ){
				errorMismatch(yylineno);
				exit(1);
			 }
			 $$ = new ExpNode(E_BOOLEAN);
		}
	| Exp RELOP Exp	
		{
			if(((ExpNode*)$1)->expType != E_INTEGER || ((ExpNode*)$3)->expType != E_INTEGER ){
				errorMismatch(yylineno);
				exit(1);
			 }
			 $$ = new ExpNode(E_BOOLEAN);
		};
%%

int main()
{
	cout << "Main: " << endl;
	int result = yyparse();
	return result ; 
}

int yyerror(string message)
{
	cout << "Error: " << endl;
	errorSyn(yylineno);
	exit(1);
}

bool isLegalAssignment(EType fromType , EType toType)
{
	if((fromType == E_UNDEFINED) || (toType == E_UNDEFINED) ) {
		std::cout << "error in isLegalAssignment " << std::endl;
		exit(1);
	}
	if(fromType == toType)
		return true;
	if((fromType == E_BYTE) && (toType == E_INTEGER))
		return true;
	
	return false;
}

std::vector<string>* ListToVector(const list<FormalDeclNode*>*  list )
{
	std::vector<string>* vec = new vector<string>();
	for(std::list<FormalDeclNode*>::const_iterator it= list->begin(); it!= list->end();++it){
		string var_type;
		switch((*it)->type){
			case E_INTEGER : var_type = "INT";
							break;
			case E_BOOLEAN : var_type = "BOOL";
							break;
			case E_BYTE :	 var_type = "BYTE";
							break;
			case E_STRING : var_type = "STRING";
							break;
			default : 
					std::cout << "error in ListToVector undefined variable"<<std::endl;
					exit(1);
		}
		vec->push_back(var_type);
	}
	return vec;
}

bool isExist(string elementId)
{
	list<list<elementData> >::const_iterator end = vartable.end();
	for(list<list<elementData> >::const_iterator element = vartable.begin()  ; element!=end ;  element++ )
	{
		list<elementData>::const_iterator lend = (*element).end();
		for(list<elementData>::const_iterator lentry = (*element).begin()  ; lentry != lend ; lentry++)
		{
			if((*lentry).id == elementId ) 
				return true ;
		}
	}
	return false ; 
}
elementData get_exists_element(string elementId){
	
	list<list<elementData> >::const_iterator end = vartable.end();
	for(list<list<elementData> >::const_iterator element = vartable.begin()  ; element!=end ;  element++ )
	{
		 list<elementData>::const_iterator lend = (*element).end();
		for(list<elementData>::const_iterator elementData = (*element).begin()  ; elementData != lend ; elementData++)
		{
			if((*elementData).id == elementId ) 
				return (*elementData) ;
		}
	}
}

bool checkFuncArgs(list<FormalDeclNode*>* decleration,list<ExpNode*>* callparams){

	if(decleration->size() != callparams->size()) return false;
	list<ExpNode*>::const_iterator element2 = callparams->begin();
	for(list<FormalDeclNode*>::const_iterator element = decleration->begin()  ; element!=decleration->end() ;  ++element ,++element2)
	{	
		if(!isLegalAssignment((*element2)->expType,(*element)->type)) return false;
	}
	return true;
}

bool checkFuncArgs2(list<EType> decleration,list<ExpNode*>* callparams){

	if(decleration.size() != callparams->size()) return false;
	list<ExpNode*>::const_iterator element2 = callparams->begin();
	for(list<EType>::const_iterator element = decleration.begin()  ; element!=decleration.end() ;  ++element ,++element2)
	{	
		if(!isLegalAssignment((*element2)->expType,*element)) return false;
	}
	return true;
}

void AddScope(){

	vartable.push_front(list<elementData>());
	offsets.push(offsets.size()==0 ? 0 :offsets.top());
}
void RemoveScope(){
	endScope();
	list<elementData> current_scope = vartable.front();

	vartable.pop_front();
	offsets.pop(); 

    list<elementData>::reverse_iterator lend = current_scope.rend();
	for(list<elementData>::reverse_iterator lentry = current_scope.rbegin()  ; lentry != lend ; lentry++){
	
	elementData var = *lentry;
		string retType;
		
		if(var.type == E_FUNC){
			
			switch(var.retType){
				case E_INTEGER :		retType = "INT";   break;
				case E_BOOLEAN :		retType = "BOOL";  break;
				case E_BYTE    : 		retType = "BYTE";  break;
				case E_VOID    :		retType = "VOID";  break;
				default : 				std::cout << "error in RemoveScope1 undefined variable"<<std::endl; exit(1); break;
			}
		}
		string var_type;
		switch(var.type){
			case E_INTEGER :			var_type = "INT";  break;
			case E_BOOLEAN :			var_type = "BOOL"; break;
			case E_BYTE    : 			var_type = "BYTE"; break;
			case E_FUNC    :			var_type = makeFunctionType(retType.c_str(),*(ListToVector(var.params))); break;
			default : 					std::cout << "error in RemoveScope2 undefined variable"<<std::endl; exit(1);
		}
		printID(var.id.c_str(),var.offset,var_type.c_str());
	}
}

int insertElement(elementData& element){
	if(isExist(element.id)){
		return -1;
	}
	if(element.id == "print" || element.id == "printi"){
		return -1;
	}
	vartable.front().push_front(element);
	
	offsets.top()++;

	return 0;
}

//bool checkExpBinOpTypes(ExpNode e1, ExpNode e2)
//{
//	if(typeid(e1).hash_code() == typeid(NumExpNode*).hash_code() || typeid(e1).hash_code() == typeid(NumBExpNode*).hash_code())
//		if(typeid(e1).hash_code() == typeid(e2).hash_code())
//			return true;
//	
//	return false;
//}

